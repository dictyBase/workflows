name: Setup Deployment Environment for DCR Application
on:
  workflow_call:
    inputs:
      dagger_path:
        type: string
        description: path where dagger binary will be kept
        default: /tmp/dag/bin
      cluster:
        required: true
        type: string
        description: "name of kubernetes cluster"
      cluster_state_storage:
        required: true
        type: string
        description: "location of cluster state"
    outputs:
      workflow_run_id:
        description: "The ID of the GitHub workflow run"
        value: ${{ jobs.deploy-setup.outputs.workflow_run_id }}

env:
  DAGGER_BIN_PATH: /tmp/dag/bin
  KUBECONFIG: /tmp/config/dictycr.yaml
  KOPS_MODULE: github.com/dictybase-docker/dagger-of-dcr/kops@main

jobs:
  deploy-setup:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs:
      workflow_run_id: ${{ steps.export_run_id.outputs.run_id }}
    steps:
      - name: manage paths
        run: |
          mkdir -p ${{ inputs.dagger_path }} $(dirname $KUBECONFIG)
          echo ${{ inputs.dagger_path }} >> $GITHUB_PATH

      - name: try to restore dagger binary cache with dagger version and checksum
        id: restore_dagger_bin_cache
        uses: actions/cache@v4
        with: 
          path: ${{ env.DAGGER_BIN_PATH }}
          key: ${{ runner.os }}-${{ steps.dag_check.outputs.dagger_version}}-${{ steps.dag_check.outputs.dagger_bin_checksum }}

      - if: steps.restore_dag_bin_cache.outputs.cache-hit != 'true'
        name: install dagger if the bin cache not restored
        id: dag_install
        run: actions sd --dagger-version ${{ steps.dag_check.outputs.dagger_version }} --dagger-bin-dir $DAGGER_BIN_PATH

      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        id: gcp_authentication
        with:
          credentials_json: ${{ secrets.DEPLOY_SA_KEY }}

      - name: export kubectl
        run: |
          dagger call -m $KOPS_MODULE with-kops with-kubectl with-cluster --name=${{ inputs.cluster }} with-credentials --credentials=${{ steps.gcp_authentication.outputs.credentials_file_path }} with-state-storage --storage=${{ inputs.cluster_state_storage }} export-kubectl --output=$KUBECONFIG

      - name: verify kubectl
        run: kubectl get nodes

      - name: share kubectl
        uses: actions/upload-artifact@v4
        with: 
          name: kubectl-config
          path: ${{ env.KUBECONFIG }}
          if-no-files-found: error
          retention-days: 0
          overwrite: true

      - name: Export GitHub Workflow Run ID
        id: export_run_id
        run: echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT


