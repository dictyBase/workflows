name: deploy dcr application to kubernetes cluster with pulumi
on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
        description: "Repository name with owner"
      image:
        required: true
        type: string 
        description: "Name of docker image"
      ref:
        required: true
        type: string
        description: "The branch,tag or SHA to checkout"
      dockerfile:
        required: true
        type: string
        description: "location of the docker file"
      namespace:
        required: false
        type: string
        default: "dictybase"
        description: "namespace to use for docker image"
      cluster:
        required: true
        type: string
        description: "name of kubernetes cluster"
      cluster_state_storage:
        required: true
        type: string
        description: "location of cluster state"

env:
  ACTION_BIN_PATH: ${GITHUB_WORKSPACE}/github_actions/bin
  DAGGER_BIN_PATH: ${GITHUB_WORKSPACE}/dag/bin
  DAGGER_CHECKSUM_PATH: ${GITHUB_WORKSPACE}/dag/checksum
  KUBECTL_CONFIG: ${GITHUB_WORKSPACE}/config/dictycr.yaml

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: manage paths
        run: |
          mkdir -p $ACTION_BIN_PATH $DAGGER_BIN_PATH $DAGGER_CHECKSUM_PATH $KUBECTL_CONFIG
          echo $ACTION_BIN_PATH >> $GITHUB_PATH
          echo $DAGGER_BIN_PATH >> $GITHUB_PATH

      - name: download and setup path for github actions binary
        run: |
          curl -L -o ${ACTION_BIN_PATH}/actions \
            https://github.com/dictybase-docker/github-actions/releases/download/v2.8.0/action_2.8.0_linux_amd64
          chmod +x ${ACTION_BIN_PATH}/actions

      - name: setup dagger version and checksum
        id: dag_check
        run: actions sc

      - name: try to restore dagger version and checksum 
        id: restore_dag_check_cache
        uses: actions/cache/restore@v3
        with: 
          path: ${{ env.DAGGER_CHECKSUM_PATH }}
          key: ${{ runner.os }}-${{ steps.dag_check.outputs.dagger_version}}-${{ steps.dag_check.outputs.dagger_bin_checksum }}

      - if: steps.restore_dag_check_cache.outputs.cache-hit != 'true'
        name: install dagger if the checksum cache not restored
        id: dag_install
        run: actions sd --dagger-version ${{ steps.dag_check.outputs.dagger_version }} --dagger-bin-dir $DAGGER_BIN_PATH

      - if: steps.restore_dag_check_cache.outputs.cache-hit != 'true'
        name: create cache with dagger version and checksum
        id: create_dag_check_cache
        uses: actions/cache/save@v3 
        with: 
          path: ${{ env.DAGGER_CHECKSUM_PATH }}
          key: ${{ runner.os }}-${{ steps.dag_check.outputs.dagger_version}}-${{ steps.dag_check.outputs.dagger_bin_checksum }}
      - if: steps.restore_dag_check_cache.outputs.cache-hit != 'true'
        name: create binary cache with dagger version and checksum
        id: create_dag_bin_cache
        uses: actions/cache/save@v3 
        with: 
          path: ${{ env.DAGGER_BIN_PATH }}
          key: ${{ runner.os }}-${{ steps.dag_check.outputs.dagger_version}}-${{ steps.dag_check.outputs.dagger_bin_checksum }}

      - if: steps.restore_dag_check_cache.outputs.cache-hit == 'true'
        name: restore dagger binary cache with dagger version and checksum
        id: restore_dagger_bin_cache
        uses: actions/cache/restore@v3 
        with: 
          path: ${{ env.DAGGER_BIN_PATH }}
          key: ${{ runner.os }}-${{ steps.dag_check.outputs.dagger_version}}-${{ steps.dag_check.outputs.dagger_bin_checksum }}
      - name: buid and push container image
        id: app_container
        run: |
            dagger call -m github.com/dictybase-docker/dagger-of-dcr/container-image@main \
            with-image \ 
              --image=${{ inputs.image }} \
            with-ref \ 
              --ref=${{ inputs.ref }} \ 
            with-dockerfile \ 
              --docker-file=${{ inputs.dockerfile }} \ 
            with-namespace \ 
              --namespace=${{ inputs.namespace }} \ 
            with-repository \
              --repository=${{ format('https://github.com/{0}',inputs.repository) }} \ 
            publish-from-repo \ 
              --user=${{ secrets.DOCKERHUB_USER }} \ 
              --password=${{ secrets.DOCKER_PASS }} > /tmp/image.txt

            echo "image=$(cat /tmp/image.txt)" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        id: gcp_authentication
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

      - name: export kubectl
        run: |
          dagger -m github.com/dictybase-docker/dagger-of-dcr/kops@main \ 
            call with-kops \ 
                 with-kubectl \ 
                 with-cluster \ 
                  --name=${{ inputs.cluster }} \ 
                  --credentials=${{ steps.gcp_authentication.outputs.credentials_file_path }} \
                  --storage=${{ inputs.cluster_state_storage }} \
                 export-kubectl \
                  --output=$KUBECTL_CONFIG

  

